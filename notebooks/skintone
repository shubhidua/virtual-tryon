import numpy as np
from PIL import Image
from scipy import io
from scipy import misc
def get_arm_mask(image_path):
    # Load segmentations and keep only the arms
    mask = io.loadmat(image_path)
    mask = misc.imresize(mask['segment'], (256,192))
    mask = np.array(((mask==14)|(mask==15)), dtype='uint8')
    mask *= 255 # Follow PIL mask conventions (0=mask, 255=keep)
    return mask
def get_color_histogram(image, mask):
    im = Image.fromarray(image)
    mask = Image.fromarray(mask)
    hist = im.histogram(mask)
    # Normalize histogram
    hist = np.asarray(hist, dtype=float)
    hist /= np.linalg.norm(hist)
    return hist
def get_skintone_similarity(in_pic_path, in_seg_path, out_pic_path, out_seg_path=''):
    # Load and resize images
    in_pic = misc.imread(in_pic_path)
    in_pic = misc.imresize(in_pic, (256, 192, 3))

    out_pic = misc.imread(out_pic_path)
    out_pic = misc.imresize(out_pic, (256, 192, 3))
    
    # Load segment and return arm mask
    in_mask  = get_arm_mask(in_seg_path)
    if out_seg_path:
        out_mask = get_arm_mask(out_seg_path)
    else:
        out_mask = in_mask
    
    # Get color histograms of arms
    in_hist  = get_color_histogram(in_pic, in_mask)
    out_hist = get_color_histogram(out_pic, out_mask)
    
    # Return dot product of histograms
    return np.dot(in_hist, out_hist)
